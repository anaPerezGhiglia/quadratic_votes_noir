{"noir_version":"0.29.0+2da28997dbedce4a00d2162eddb57564bdb23546","hash":10944520660244827304,"abi":{"parameters":[{"name":"commitments","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"public"},{"name":"all_votes","type":{"kind":"array","length":20,"type":{"kind":"integer","sign":"unsigned","width":32}},"visibility":"private"},{"name":"secrets","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"private"}],"param_witnesses":{"all_votes":[{"start":2,"end":22}],"commitments":[{"start":0,"end":2}],"secrets":[{"start":22,"end":24}]},"return_type":{"abi_type":{"kind":"array","length":10,"type":{"kind":"integer","sign":"unsigned","width":32}},"visibility":"public"},"return_witnesses":[36,37,38,39,40,41,42,43,44,45]},"bytecode":"H4sIAAAAAAAA/9WZeWvbQBDFfeRwEt9HLl9ru2mapgbJkmzpv34VG8u00OJSRPPtl3qSCShD/lnyVqABMXnx8ND7+dpdFwsvNT9cS/67eLhKfKmULgt9JPSx0CdCnwpdEfpM6HOhL4SuCl0Tui50Q+im0C2h20J3hO4K3UvpCt8v1eXh0jyjmaNmfpq5aealmZNmD81cNPPQ7KvZ+7rwtkrcv3N3PlZu2stzlr4frxax67lrZxFtwsDxg80ydEM3CIPtIvS8OPTDVbSJVk7k+l7s7oLI27HZNe6+HMn4iplUude417k3uDe5t7i3uXe4d7n3UoxvLDMuAhnf4O7LSWcugzOXgF5VIL/bAvY1SjnJUxXeFppnGehVA/LsW+DZz4DnEdCrDuQ5sMBzkAHPY6BXA8hzaIHnMAOeJ0CvJpDnyALPUQY8T4FeLSDPsQWe4wx4VoBebSBPZYGnyoDnGdCrA+Q5scBzkgHPc6BXF8hzaoHnNAOeF0CvHpDnzALP2Ts8S2Cet0AGn4AMbGbuAzPf5STzAJj5c04yD4GZ73OSeQTM/CUnmcfAzA85yayAmb/mJPMEmPkxJ5mnwMzfcpJ5Bsw8B2amddnrevYylZ3+R+d4dPZE5yW0x6d9Ke2laP1Pa1Y6O6bzTjqjo3MlOguh/TvtOWmfRGv7HvtepZhSFdmHitZYtOag72D6TqLPaPrMovcwvabpOZ6n5qlef1cYcF8nSfz7T6KSvVpvt+rpZ/JD7f/Ff3e/9k/0eN9wfmg4PzacnxjOzwzn7wzn7w3nHwznHw3nn+s/sWU+eWEdAAA=","debug_symbols":"zZbLCsIwEEX/ZdZdNDNJG/srIhK1SqGkpQ9BSv/dVKsLXyBywV0muTnMLA7MQLt80x/Whd9XLWXLgcpq67qi8qEaiOPLXVs7P5Vt55qOMhaOKPe7cLI8RrQvypwynYzRU1SpNJ2zipV8Ezb3MC/GVUSsfu7FqDe9THj+o1EFO6p+ibd2/iKx/Yw3qZmjSaIe4QYJT5DwFAm3SPgCCJcYCVdIOCPhgoQjDRWkoYI0VJCGCtJQQRqqkYZqpKEaaajGGRqKo2sKtynzaU+a3nq/va1NoexO9fUlZM8=","file_map":{"29":{"source":"mod poseidon;\nmod mimc;\nmod poseidon2;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::sha256::{digest, sha256_var};\n\n#[foreign(sha256)]\n// docs:start:sha256\npub fn sha256<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[foreign(pedersen_commitment)]\npub fn __pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<N>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(input: [Field; N], separator: u32) -> Field {}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes(32).as_array();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(keccak256)]\n// docs:start:keccak256\npub fn keccak256<N>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<N>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// Generic hashing support. \n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\ntrait Hash{\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\ntrait Hasher{\n    fn finish(self) -> Field;\n    \n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\ntrait BuildHasher<H> where H: Hasher{\n    fn build_hasher(self) -> H;\n}\n\nstruct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn build_hasher(_self: Self) -> H{\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn default() -> Self{\n        BuildHasherDefault{}\n    }    \n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, N> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n","path":"std/hash.nr"},"46":{"source":"use dep::std;\n\nglobal CANDIDATE_COUNT = 10;\nglobal VOTER_COUNT = 2;\n\nfn main(commitments: pub [Field; VOTER_COUNT], all_votes: [u32; VOTER_COUNT * CANDIDATE_COUNT], secrets: [Field; VOTER_COUNT]) -> pub [u32; CANDIDATE_COUNT] {\n    check_commitments(commitments, secrets, all_votes);\n    sum_votes(all_votes)\n}\n\nfn sum_votes(all_votes: [u32; VOTER_COUNT * CANDIDATE_COUNT]) -> [u32; CANDIDATE_COUNT] {\n    let mut totals = [0; CANDIDATE_COUNT];\n    for voter_index in 0..VOTER_COUNT {\n        for candidate_index in 0..CANDIDATE_COUNT {\n            totals[candidate_index] = totals[candidate_index] + all_votes[(voter_index * CANDIDATE_COUNT) + candidate_index] ;\n        }\n    }\n    totals\n}\n\nfn check_commitments(commitments: [Field; VOTER_COUNT], secrets: [Field; VOTER_COUNT], all_votes: [u32; VOTER_COUNT * CANDIDATE_COUNT]) {\n    for voter_idx in 0..VOTER_COUNT{\n        let mut transcript = [0; CANDIDATE_COUNT + 1];\n        transcript[0] = secrets[voter_idx];\n        for candidate_idx in 0..CANDIDATE_COUNT{\n            transcript[candidate_idx + 1] = all_votes[voter_idx * CANDIDATE_COUNT + candidate_idx] as Field;\n        }\n        assert(commitments[voter_idx] == std::hash::pedersen_hash(transcript));\n    }\n}\n\n","path":"/Users/anaperezghiglia/sources/examples/quadratic_votes/manager_circuit/src/main.nr"}},"names":["main"]}