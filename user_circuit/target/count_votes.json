{"noir_version":"0.29.0+2da28997dbedce4a00d2162eddb57564bdb23546","hash":17599795812463350778,"abi":{"parameters":[{"name":"token_budget","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"votes","type":{"kind":"array","length":10,"type":{"kind":"integer","sign":"unsigned","width":32}},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"secret":[{"start":11,"end":12}],"token_budget":[{"start":0,"end":1}],"votes":[{"start":1,"end":11}]},"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[34]},"bytecode":"H4sIAAAAAAAA/72Za2+bMBSGuSSEpLnf76FZNU3TNOEADXzbX0kUolVKlWpiq/bnp9XaYXUdWgn3HCxFhxMZv+Y5r4MDuvav3Tx9QjjWnz4GHDtCrku5IeWmlJekvCzllpRXpNyW8qqU1yBP58zbN4ju+xrTYUx5XM+99f14u4mZx3buJtqHgesH+9uQhSwIg8Mm9Lw49MNttI+2bsR8L2bHIPKOMHAdb45uyqFOyMEQao/JoUHAoSFwSJuJzAOxfqyByLNJwLNJ6CsTaoPtqxYBh1YBvkKsH2sh8mwT8GwT+orfc0oEvuoQcOgU4CvE+rEOIs8uAc8uoa/43qVM4KseAYdeAb5CrB/rIfLsE/DsE/qK74EtAl8NCDgMCvAVYv3YAJHnkIDnkNBX/L9UhcBXIwIOowJ8hVg/NkLkOSbgOSb0Ff9PbhP4akLAYVKArxDrxyaIPKcEPKeEvuLPdqoEvpoRcJgV4CvE+rEZIs85Ac85oa/4M8Iaga8WBBwWBfgKsX5sgchzScBzCTwtGNfQLpuBzBfTYwhMWHqQceloY4tcVxAd7XnNYQn+F04L7Gj0C4aqoO8d6wPeNbpv8VOc5wbmyVaI1+wg1hWBX+biwr7RrDTcdcM371cwHo9/YM48GhBNiCWIZYgWxApEG2IVYg0ib9fay4b9Q3uNyHit4d58TIFv6on0BWkJeFrA0QZ+NeivZ3iJz68nfF+XGO+SJL5/SJzk7Nz/PCV3D6ffzuNd8t05/4p/HE/nR96pqXJSGzrPL0/aHQ6X/bsqIv2cIkMVkXFOkamKyDynyFJFxMkpslYRuckp8lFF5FNOkc8qIl9yinxVEXHziKTL2oaY7k95k/eoWXvWtfbynbz4M6EL55jac/E1qb8ujL8Wzsnqo78yzlXGPDsZ3/0FhqBD5GQiAAA=","debug_symbols":"tZhLasMwFEX3orEHeh9ZlrdSQlESpxiMHGKnUIz3XrlFoaQhk3BnftblIC48Dmgxx25//Xjv02mcTPu2mGE8xLkfU54WQ/TzbzrHtI3THC+zaYlsZbp0zF/OrpU59UNnWq3X6l9UbYkq0d/orjLESLgg4YqEuxfh0ugNzvfwGgn3yFoaJDwAa2GLhCM3lJEbyoKsRZFwh6ylRsI9spYGCQ/AWsQi4QSsRRgJRzpUkA4VpEMF6VBBOlSQDhWkQxXpUEU6VJEOVaRDFelQRTpUkQ5VpEMV6VB92aFCBe7CHdxZJJyQcEbCBQl/vKGuLvDQPId7Lvfwrn4eJfK+YJncLcxh3eXhM176uB+67dlgO7umQ3lFyOP8df49ydlv","file_map":{"29":{"source":"mod poseidon;\nmod mimc;\nmod poseidon2;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::sha256::{digest, sha256_var};\n\n#[foreign(sha256)]\n// docs:start:sha256\npub fn sha256<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[foreign(pedersen_commitment)]\npub fn __pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<N>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(input: [Field; N], separator: u32) -> Field {}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes(32).as_array();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(keccak256)]\n// docs:start:keccak256\npub fn keccak256<N>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<N>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// Generic hashing support. \n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\ntrait Hash{\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\ntrait Hasher{\n    fn finish(self) -> Field;\n    \n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\ntrait BuildHasher<H> where H: Hasher{\n    fn build_hasher(self) -> H;\n}\n\nstruct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn build_hasher(_self: Self) -> H{\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn default() -> Self{\n        BuildHasherDefault{}\n    }    \n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, N> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n","path":"std/hash.nr"},"46":{"source":"use dep::std;\nfn main(token_budget: pub u32, votes: [u32; CANDIDATE_COUNT], secret: Field) -> pub Field {\n    check_within_budget(token_budget, votes);\n    calculate_ballot_commitment(secret, votes)\n}\n\nglobal CANDIDATE_COUNT = 10;\n\nfn check_within_budget(token_budget: u32, votes: [u32; CANDIDATE_COUNT]) { \n    let mut tokens_spent = 0;\n    for vote in votes{\n        tokens_spent = tokens_spent + (vote * vote);\n    }\n    assert(token_budget >= tokens_spent);\n}\n\nfn calculate_ballot_commitment(secret: Field, votes: [u32; CANDIDATE_COUNT]) -> Field {\n    let mut transcript = [0; CANDIDATE_COUNT + 1];\n    transcript[0] = secret;\n    for i in 0..CANDIDATE_COUNT{\n        transcript[i+1] = votes[i] as Field;\n    }\n    std::hash::pedersen_hash(transcript)\n}\n","path":"/Users/anaperezghiglia/sources/examples/count_votes/src/main.nr"}},"names":["main"]}